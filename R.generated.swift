//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 0 colors.
  struct color {
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 6 files.
  struct file {
    /// Resource file `UnsplashPhotoStubResponse.json`.
    static let unsplashPhotoStubResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "UnsplashPhotoStubResponse", pathExtension: "json")
    /// Resource file `UnsplashPhotosStubResponse.json`.
    static let unsplashPhotosStubResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "UnsplashPhotosStubResponse", pathExtension: "json")
    /// Resource file `UnsplashSearchPhotosStubResponse.json`.
    static let unsplashSearchPhotosStubResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "UnsplashSearchPhotosStubResponse", pathExtension: "json")
    /// Resource file `UnsplashUserLikedPhotosStubResponse.json`.
    static let unsplashUserLikedPhotosStubResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "UnsplashUserLikedPhotosStubResponse", pathExtension: "json")
    /// Resource file `UnsplashUserPhotosStubResponse.json`.
    static let unsplashUserPhotosStubResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "UnsplashUserPhotosStubResponse", pathExtension: "json")
    /// Resource file `UnsplashUserPublicProfileStubResponse.json`.
    static let unsplashUserPublicProfileStubResponseJson = Rswift.FileResource(bundle: R.hostingBundle, name: "UnsplashUserPublicProfileStubResponse", pathExtension: "json")
    
    /// `bundle.url(forResource: "UnsplashPhotoStubResponse", withExtension: "json")`
    static func unsplashPhotoStubResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unsplashPhotoStubResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "UnsplashPhotosStubResponse", withExtension: "json")`
    static func unsplashPhotosStubResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unsplashPhotosStubResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "UnsplashSearchPhotosStubResponse", withExtension: "json")`
    static func unsplashSearchPhotosStubResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unsplashSearchPhotosStubResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "UnsplashUserLikedPhotosStubResponse", withExtension: "json")`
    static func unsplashUserLikedPhotosStubResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unsplashUserLikedPhotosStubResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "UnsplashUserPhotosStubResponse", withExtension: "json")`
    static func unsplashUserPhotosStubResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unsplashUserPhotosStubResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "UnsplashUserPublicProfileStubResponse", withExtension: "json")`
    static func unsplashUserPublicProfileStubResponseJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.unsplashUserPublicProfileStubResponseJson
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.actions` struct is generated, and contains static references to 6 images.
    struct actions {
      /// Image `download`.
      static let download = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/download")
      /// Image `instagramLogo`.
      static let instagramLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/instagramLogo")
      /// Image `navigation-arrow`.
      static let navigationArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/navigation-arrow")
      /// Image `search`.
      static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/search")
      /// Image `share`.
      static let share = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/share")
      /// Image `twitterLogo`.
      static let twitterLogo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/twitterLogo")
      
      /// `UIImage(named: "download", bundle: ..., traitCollection: ...)`
      static func download(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.download, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "instagramLogo", bundle: ..., traitCollection: ...)`
      static func instagramLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.instagramLogo, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "navigation-arrow", bundle: ..., traitCollection: ...)`
      static func navigationArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.navigationArrow, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "search", bundle: ..., traitCollection: ...)`
      static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.search, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "share", bundle: ..., traitCollection: ...)`
      static func share(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.share, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "twitterLogo", bundle: ..., traitCollection: ...)`
      static func twitterLogo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.twitterLogo, compatibleWith: traitCollection)
      }
      
      /// This `R.image.actions.layout` struct is generated, and contains static references to 2 images.
      struct layout {
        /// Image `layout-grid`.
        static let layoutGrid = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Layout/layout-grid")
        /// Image `layout-list`.
        static let layoutList = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Layout/layout-list")
        
        /// `UIImage(named: "layout-grid", bundle: ..., traitCollection: ...)`
        static func layoutGrid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.actions.layout.layoutGrid, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "layout-list", bundle: ..., traitCollection: ...)`
        static func layoutList(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.actions.layout.layoutList, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      /// This `R.image.actions.like` struct is generated, and contains static references to 2 images.
      struct like {
        /// Image `like-nonSelected`.
        static let likeNonSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Like/like-nonSelected")
        /// Image `like-selected`.
        static let likeSelected = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Like/like-selected")
        
        /// `UIImage(named: "like-nonSelected", bundle: ..., traitCollection: ...)`
        static func likeNonSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.actions.like.likeNonSelected, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "like-selected", bundle: ..., traitCollection: ...)`
        static func likeSelected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.actions.like.likeSelected, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.icons` struct is generated, and contains static references to 1 images.
    struct icons {
      /// Image `location`.
      static let location = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/location")
      
      /// `UIImage(named: "location", bundle: ..., traitCollection: ...)`
      static func location(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.location, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.placeholders` struct is generated, and contains static references to 1 images.
    struct placeholders {
      /// Image `user-profileImage-placeholder`.
      static let userProfileImagePlaceholder = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholders/user-profileImage-placeholder")
      
      /// `UIImage(named: "user-profileImage-placeholder", bundle: ..., traitCollection: ...)`
      static func userProfileImagePlaceholder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.placeholders.userProfileImagePlaceholder, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.tabBar` struct is generated, and contains static references to 0 images.
    struct tabBar {
      /// This `R.image.tabBar.collections` struct is generated, and contains static references to 2 images.
      struct collections {
        /// Image `collections-active`.
        static let collectionsActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab Bar/Collections/collections-active")
        /// Image `collections-inactive`.
        static let collectionsInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab Bar/Collections/collections-inactive")
        
        /// `UIImage(named: "collections-active", bundle: ..., traitCollection: ...)`
        static func collectionsActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.collections.collectionsActive, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "collections-inactive", bundle: ..., traitCollection: ...)`
        static func collectionsInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.collections.collectionsInactive, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      /// This `R.image.tabBar.me` struct is generated, and contains static references to 2 images.
      struct me {
        /// Image `me-active`.
        static let meActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab Bar/Me/me-active")
        /// Image `me-inactive`.
        static let meInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab Bar/Me/me-inactive")
        
        /// `UIImage(named: "me-active", bundle: ..., traitCollection: ...)`
        static func meActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.me.meActive, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "me-inactive", bundle: ..., traitCollection: ...)`
        static func meInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.me.meInactive, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      /// This `R.image.tabBar.photos` struct is generated, and contains static references to 2 images.
      struct photos {
        /// Image `photos-active`.
        static let photosActive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab Bar/Photos/photos-active")
        /// Image `photos-inactive`.
        static let photosInactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Tab Bar/Photos/photos-inactive")
        
        /// `UIImage(named: "photos-active", bundle: ..., traitCollection: ...)`
        static func photosActive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.photos.photosActive, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "photos-inactive", bundle: ..., traitCollection: ...)`
        static func photosInactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.photos.photosInactive, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 7 nibs.
  struct nib {
    /// Nib `CollectionLoadingView`.
    static let collectionLoadingView = _R.nib._CollectionLoadingView()
    /// Nib `PhotoDetailsViewController`.
    static let photoDetailsViewController = _R.nib._PhotoDetailsViewController()
    /// Nib `PhotoViewerViewController`.
    static let photoViewerViewController = _R.nib._PhotoViewerViewController()
    /// Nib `PhotosCollectionGridCell`.
    static let photosCollectionGridCell = _R.nib._PhotosCollectionGridCell()
    /// Nib `PhotosCollectionListCell`.
    static let photosCollectionListCell = _R.nib._PhotosCollectionListCell()
    /// Nib `UserProfileViewController`.
    static let userProfileViewController = _R.nib._UserProfileViewController()
    /// Nib `YouthPhotoExifView`.
    static let youthPhotoExifView = _R.nib._YouthPhotoExifView()
    
    /// `UINib(name: "CollectionLoadingView", in: bundle)`
    static func collectionLoadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collectionLoadingView)
    }
    
    /// `UINib(name: "PhotoDetailsViewController", in: bundle)`
    static func photoDetailsViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoDetailsViewController)
    }
    
    /// `UINib(name: "PhotoViewerViewController", in: bundle)`
    static func photoViewerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photoViewerViewController)
    }
    
    /// `UINib(name: "PhotosCollectionGridCell", in: bundle)`
    static func photosCollectionGridCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photosCollectionGridCell)
    }
    
    /// `UINib(name: "PhotosCollectionListCell", in: bundle)`
    static func photosCollectionListCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.photosCollectionListCell)
    }
    
    /// `UINib(name: "UserProfileViewController", in: bundle)`
    static func userProfileViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.userProfileViewController)
    }
    
    /// `UINib(name: "YouthPhotoExifView", in: bundle)`
    static func youthPhotoExifView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.youthPhotoExifView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 0 reuse identifiers.
  struct reuseIdentifier {
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 0 localization tables.
  struct string {
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _PhotosCollectionListCell.validate()
      try _UserProfileViewController.validate()
    }
    
    struct _CollectionLoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CollectionLoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> CollectionLoadingView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollectionLoadingView
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoDetailsViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoDetailsViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PhotoViewerViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotoViewerViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _PhotosCollectionGridCell: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PhotosCollectionGridCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotosCollectionGridCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotosCollectionGridCell
      }
      
      fileprivate init() {}
    }
    
    struct _PhotosCollectionListCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "PhotosCollectionListCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> PhotosCollectionListCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? PhotosCollectionListCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Actions/Like/like-nonSelected", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/Like/like-nonSelected' is used in nib 'PhotosCollectionListCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Actions/share", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/share' is used in nib 'PhotosCollectionListCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _UserProfileViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "UserProfileViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      func fourthView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[3] as? UIKit.UIView
      }
      
      func secondView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[1] as? UIKit.UIView
      }
      
      func thirdView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[2] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Actions/twitterLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/twitterLogo' is used in nib 'UserProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Placeholders/user-profileImage-placeholder", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Placeholders/user-profileImage-placeholder' is used in nib 'UserProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icons/location", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/location' is used in nib 'UserProfileViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Actions/instagramLogo", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/instagramLogo' is used in nib 'UserProfileViewController', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _YouthPhotoExifView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "YouthPhotoExifView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard {
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
